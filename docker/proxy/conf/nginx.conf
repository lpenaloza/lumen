worker_processes auto;

error_log  /dev/stderr warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  __nginx_worker_connections__;
}

http {

  server_tokens off;

  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /dev/stdout  main;

  sendfile        on;

  keepalive_timeout  __nginx_keepalive_timeout__;

  gzip  on;
  gzip_static on;
  gzip_disable "msie6";
  gzip_http_version 1.1;
  gzip_vary on;
  gzip_comp_level 6;
  gzip_proxied any;
  gzip_buffers 16 8k;
  gzip_types
      text/plain
      text/css
      text/js
      text/xml
      text/javascript
      application/javascript
      application/x-javascript
      application/json
      application/xml
      application/rss+xml
      image/svg+xml;

  server {

    listen 80;
    server_name _;

    root /var/www/html;

    location ~ /.well-known {
      root /etc/nginx/ssl;
      default_type "text/plain";
      allow all;
    }

    location / {
      return 301 https://$host$request_uri;
    }

  }

  server {

    listen 443 ssl http2;
    server_name _;

    client_max_body_size __nginx_client_max_body_size__;
    client_body_buffer_size __nginx_client_body_buffer_size__;

    root /var/www/html;

    index index.php index.html; # Letting nginx know which files to try when requesting a folder

    ssl_certificate /etc/nginx/ssl/ssl.crt;
    ssl_certificate_key /etc/nginx/ssl/ssl.key;

    location = /favicon.ico {
      log_not_found off;
      access_log off;
    }

   location /api/ {
      proxy_set_header HOST $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://backend/;
   }

   location / {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
      add_header Access-Control-Allow-Headers "Authorization";
      proxy_pass http://frontend:3000/;
   }

  }

}
